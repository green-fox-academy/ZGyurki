
SPI_communication.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000011c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001a0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000976  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000843  00000000  00000000  00000b96  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000344  00000000  00000000  000013d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  00001720  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000492  00000000  00000000  000017a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000110  00000000  00000000  00001c36  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001d46  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__ctors_end>
   4:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
   8:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
   c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  10:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  14:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  18:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  1c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  20:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  24:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  28:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  2c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  30:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  34:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  38:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  3c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  40:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  44:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  48:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  4c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  50:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  54:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  58:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  5c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  60:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  64:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  68:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>

0000006c <__ctors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf ef       	ldi	r28, 0xFF	; 255
  72:	d4 e0       	ldi	r29, 0x04	; 4
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61
  78:	0e 94 73 00 	call	0xe6	; 0xe6 <main>
  7c:	0c 94 8c 00 	jmp	0x118	; 0x118 <_exit>

00000080 <__bad_interrupt>:
  80:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000084 <MCP4821_Init>:
#endif
#include <avr/delay.h>

void SystemInit() {
	// Call the DAC driver init function
	MCP4821_Init();
  84:	23 9a       	sbi	0x04, 3	; 4
  86:	25 9a       	sbi	0x04, 5	; 4
  88:	22 9a       	sbi	0x04, 2	; 4
  8a:	2a 9a       	sbi	0x05, 2	; 5
  8c:	8c b5       	in	r24, 0x2c	; 44
  8e:	87 7f       	andi	r24, 0xF7	; 247
  90:	8c bd       	out	0x2c, r24	; 44
  92:	8c b5       	in	r24, 0x2c	; 44
  94:	8b 7f       	andi	r24, 0xFB	; 251
  96:	8c bd       	out	0x2c, r24	; 44
  98:	8c b5       	in	r24, 0x2c	; 44
  9a:	80 61       	ori	r24, 0x10	; 16
  9c:	8c bd       	out	0x2c, r24	; 44
  9e:	8c b5       	in	r24, 0x2c	; 44
  a0:	83 60       	ori	r24, 0x03	; 3
  a2:	8c bd       	out	0x2c, r24	; 44
  a4:	8c b5       	in	r24, 0x2c	; 44
  a6:	80 64       	ori	r24, 0x40	; 64
  a8:	8c bd       	out	0x2c, r24	; 44
  aa:	08 95       	ret

000000ac <MCP4821_SendRawData>:
  ac:	cf 93       	push	r28
  ae:	df 93       	push	r29
  b0:	1f 92       	push	r1
  b2:	cd b7       	in	r28, 0x3d	; 61
  b4:	de b7       	in	r29, 0x3e	; 62
  b6:	2a 98       	cbi	0x05, 2	; 5
  b8:	9e bd       	out	0x2e, r25	; 46
  ba:	0d b4       	in	r0, 0x2d	; 45
  bc:	07 fe       	sbrs	r0, 7
  be:	fd cf       	rjmp	.-6      	; 0xba <MCP4821_SendRawData+0xe>
  c0:	9e b5       	in	r25, 0x2e	; 46
  c2:	99 83       	std	Y+1, r25	; 0x01
  c4:	8e bd       	out	0x2e, r24	; 46
  c6:	0d b4       	in	r0, 0x2d	; 45
  c8:	07 fe       	sbrs	r0, 7
  ca:	fd cf       	rjmp	.-6      	; 0xc6 <MCP4821_SendRawData+0x1a>
  cc:	8e b5       	in	r24, 0x2e	; 46
  ce:	89 83       	std	Y+1, r24	; 0x01
  d0:	2a 9a       	sbi	0x05, 2	; 5
  d2:	0f 90       	pop	r0
  d4:	df 91       	pop	r29
  d6:	cf 91       	pop	r28
  d8:	08 95       	ret

000000da <MCP4821_SendData>:
  da:	fc 01       	movw	r30, r24
  dc:	80 81       	ld	r24, Z
  de:	91 81       	ldd	r25, Z+1	; 0x01
  e0:	0e 94 56 00 	call	0xac	; 0xac <MCP4821_SendRawData>
  e4:	08 95       	ret

000000e6 <main>:
}

int main(void) {
  e6:	cf 93       	push	r28
  e8:	df 93       	push	r29
  ea:	00 d0       	rcall	.+0      	; 0xec <main+0x6>
  ec:	cd b7       	in	r28, 0x3d	; 61
  ee:	de b7       	in	r29, 0x3e	; 62
#endif
#include <avr/delay.h>

void SystemInit() {
	// Call the DAC driver init function
	MCP4821_Init();
  f0:	0e 94 42 00 	call	0x84	; 0x84 <MCP4821_Init>
	MCP4821_Data_t DAC_data;
	DAC_data.start_zero = 0;
	DAC_data.dont_care = 0;
	DAC_data.gain = 0;
	DAC_data.shutdown = 1;
	DAC_data.data = 0xFFF;
  f4:	8f ef       	ldi	r24, 0xFF	; 255
  f6:	89 83       	std	Y+1, r24	; 0x01
  f8:	8f e1       	ldi	r24, 0x1F	; 31
  fa:	8a 83       	std	Y+2, r24	; 0x02

	// Send the data structure
	MCP4821_SendData(&DAC_data);
  fc:	ce 01       	movw	r24, r28
  fe:	01 96       	adiw	r24, 0x01	; 1
 100:	0e 94 6d 00 	call	0xda	; 0xda <MCP4821_SendData>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 104:	2f ef       	ldi	r18, 0xFF	; 255
 106:	84 e3       	ldi	r24, 0x34	; 52
 108:	9c e0       	ldi	r25, 0x0C	; 12
 10a:	21 50       	subi	r18, 0x01	; 1
 10c:	80 40       	sbci	r24, 0x00	; 0
 10e:	90 40       	sbci	r25, 0x00	; 0
 110:	e1 f7       	brne	.-8      	; 0x10a <main+0x24>
 112:	00 c0       	rjmp	.+0      	; 0x114 <main+0x2e>
 114:	00 00       	nop
 116:	f6 cf       	rjmp	.-20     	; 0x104 <main+0x1e>

00000118 <_exit>:
 118:	f8 94       	cli

0000011a <__stop_program>:
 11a:	ff cf       	rjmp	.-2      	; 0x11a <__stop_program>
